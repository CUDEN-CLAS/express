<?php

/**
 * Implements hook_page_alter().
 */
function cu_share_page_alter(&$page) {
  // Load settings
  $settings = variable_get('cu_share_settings', '');
  $share_types = variable_get('cu_share_types', '');
  $position = variable_get('cu_share_position', 'side');
  $share_services = _cu_share_services();

  // Add css
  drupal_add_css(drupal_get_path('module', 'cu_share') . '/css/cu-share.css');

  // Don't add share links on admin paths
  if (!path_is_admin(current_path())) {
    // Get current node
    $node = menu_get_object();

    if ($node) {
      $type = $node->type;

      // See if current node type is set to have sharing links
      if ($share_types[$type]) {
        // Get current url
        $current_url = url(current_path(), array('absolute' => TRUE));

        if ($settings) {
          // Assign weights to form services
          foreach ($settings as $key => $setting) {
            $share_services[$key]['#weight'] = $settings[$key]['weight'];
          }
          // Sort services by weight
          uasort($share_services, function($a, $b) {
            return $a['#weight'] - $b['#weight'];
          });
        }

        $output = '';
        // Loop through services
        foreach ($share_services as $key => $share_service) {
          // If service is enabled build the link and list item
          if ($settings[$key]['enabled']) {
            // Build sharing url
            $url = $share_service['url'] . urlencode($current_url);
            $output .= '<li class="social-share-item">';
            $output .= '<a href="' . $url . '" target="_blank"><span class="socicon soc-' . $key . '"></span><span class="element-invisible">Share via ' . $share_service['name'] . '</span></a>';
            $output .= '</li>';
          }
        }
        $output .= '</ul>';

        // Add to sidebar for desktop view
        if ($position == 'side') {
          $page['page_bottom']['cu_share']['#markup'] = '<ul class="soc social-links-48">' . $output;
          $page['page_bottom']['cu_share']['#prefix'] = '<div class="cu-share-sidebar">';
          $page['page_bottom']['cu_share']['#suffix'] =  '</div>';
        }

        // Add to content for non-desktop view
        $page['content']['share']['#markup'] = '<ul class="soc social-links-24"><li>
        <span class="social-links-text"><i class="fa fa-share-alt"></i> Share </li></span>' . $output;

        if ($position == 'side') {
          $page['content']['share']['#prefix'] = '<div class="cu-share-inline-mobile block">';
        } else {
          $page['content']['share']['#prefix'] = '<div class="cu-share-inline block">';
        }
        $page['content']['share']['#suffix'] =  '</div>';
        $page['content']['share']['#weight'] = -100;
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function cu_share_permission() {
  return array(
    'administer cu share' => array(
      'title' => 'Configure Social Sharing',
      'description' => 'Choose which content types and sharing services will be used.',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cu_share_menu() {
  // Search settings
  $items['admin/settings/social/share'] = array(
    'title' => 'Social Share Settings',
    'description' => 'Configure social share settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_share_settings_form'),
    'access arguments' => array('administer cu share'),
  );
  return $items;
}

function cu_share_settings_form($form, &$form_state) {
  $form = array();

  // Build options of node types
  $types = node_type_get_types();
  $options = array();
  foreach ($types as $type) {
    $options[$type->type] = $type->name;
  }
  // Sort types alphabetically
  asort($options);
  $form['cu_share_types'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Content Types',
    '#description' => 'Choose which content types the sharing icons will appear.',
    '#options' => $options,
    '#default_value' => variable_get('cu_share_types', ''),
  );
  // Get services
  $share_services = _cu_share_services();
  // Get saved settings
  $settings = variable_get('cu_share_settings', '');
  if ($settings) {
    // Assign weights to form services
    foreach ($settings as $key => $setting) {
      $share_services[$key]['#weight'] = $settings[$key]['weight'];
    }
    // Sort services by weight
    uasort($share_services, function($a, $b) {
      return $a['#weight'] - $b['#weight'];
    });
  }

  // Build sortable services
  $form['cu_share_settings']['#tree'] = TRUE;
  $weight = 1;
  foreach ($share_services as $key => $service) {
    $form['cu_share_settings'][$key] = array(
      'name' => array(
        '#markup' => $service['name'],
      ),
      'enabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Enabled'),
        '#title_display' => 'invisible',
        '#default_value' => isset($settings[$key]) ? $settings[$key]['enabled'] : NULL,
      ),
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => isset($settings[$key]) ? $settings[$key]['weight'] : $weight,
        '#delta' => 10,
        '#title_display' => 'invisible',
      ),
    );
    $weight++;
  }
  $form['cu_share_position'] = array(
    '#type' => 'radios',
    '#title' => 'Position',
    '#description' => 'Choose where sharing icons will appear on a desktop view',
    '#options' => array(
      'side' => 'Left Side',
      'content' => 'Below Title',
    ),
    '#default_value' => variable_get('cu_share_position', 'side'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Sharing Settings'));
  $form['#submit'][] = 'cu_share_settings_form_submit';
  return $form;
}

/**
 * Implements hook_theme().
 */
function cu_share_theme() {
  return array(
    'cu_share_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme function for cu_share_settings_form()
 */
function theme_cu_share_settings_form($variables) {
  $form = $variables['form'];

  // Initialize the variable which will store our table rows.
  $rows = array();

  // Iterate over each element in our $form['cu_share_settings'] array.
  foreach (element_children($form['cu_share_settings']) as $id) {

    // Before we add our 'weight' column to the row, we need to give the
    // element a custom class so that it can be identified in the
    // drupal_add_tabledrag call.
    $form['cu_share_settings'][$id]['weight']['#attributes']['class'] = array('cu-share-item-weight');

    // We are now ready to add each element of our $form data to the $rows
    // array, so that they end up as individual table cells when rendered
    // in the final table.  We run each element through the drupal_render()
    // function to generate the final html markup for that element.
    $rows[] = array(
      'data' => array(
        // Add our 'name' column.
        drupal_render($form['cu_share_settings'][$id]['name']),
        // Add our 'enabled' column.
        drupal_render($form['cu_share_settings'][$id]['enabled']),
        // Add our 'weight' column.
        drupal_render($form['cu_share_settings'][$id]['weight']),
      ),
      // To support the tabledrag behaviour, we need to assign each row of the
      // table a class attribute of 'draggable'. This will add the 'draggable'
      // class to the <tr> element for that row when the final table is
      // rendered.
      'class' => array('draggable'),
    );
  }

  // We now define the table header values.  Ensure that the 'header' count
  // matches the final column count for your table.
  $header = array(t('Name'), t('Enabled'), t('Weight'));

  // We also need to pass the drupal_add_tabledrag() function an id which will
  // be used to identify the <table> element containing our tabledrag form.
  // Because an element's 'id' should be unique on a page, make sure the value
  // you select is NOT the same as the form ID used in your form declaration.
  $table_id = 'cu-share-settings-table';

  // We can render our tabledrag table for output.
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
    'caption' => isset($form['cu_share_settings']['#description']) ? $form['cu_share_settings']['#description'] : '',
  ));

  // And then render any remaining form elements (such as our submit button).
  $output .= drupal_render_children($form);

  // We now call the drupal_add_tabledrag() function in order to add the
  // tabledrag.js goodness onto our page.
  //
  // For a basic sortable table, we need to pass it:
  // - the $table_id of our <table> element,
  // - the $action to be performed on our form items ('order'),
  // - a string describing where $action should be applied ('siblings'),
  // - and the class of the element containing our 'weight' element.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'cu-share-item-weight');

  return $output;
}

/**
 * Submit function for cu_share_settings_form()
 */
function cu_share_settings_form_submit($form, &$form_state) {
  // Save sharing settings
  $share_settings = $form_state['values']['cu_share_settings'];
  $settings = array_intersect_key($share_settings, array_flip(element_children($share_settings)));
  variable_set('cu_share_settings', $settings);

  // Save sharing node types
  $share_types = $form_state['values']['cu_share_types'];
  variable_set('cu_share_types', $share_types);

  // Save sharing position
  $position = $form_state['values']['cu_share_position'];
  variable_set('cu_share_position', $position);
}

/**
 * Function to return services options
 */
function _cu_share_services() {
  $options = array();
  $options['twitter'] = array(
    'name' => 'Twitter',
    'url' => 'https://twitter.com/home?status=',
  );
  $options['facebook'] = array(
    'name' => 'Facebook',
    'url' => 'https://www.facebook.com/sharer/sharer.php?u=',
  );
  $options['googleplus'] = array(
    'name' => 'Google Plus',
    'url' => 'https://plus.google.com/share?url=',
  );
  $options['linkedin'] = array(
    'name' => 'LinkedIn',
    'url' => 'https://www.linkedin.com/shareArticle?mini=true&title=&summary=&source=&url=',
  );
  $options['email'] = array(
      'name' => 'E-mail',
      'url' => 'mailto:?&body=Check%20this%20out%20-%20',
  );
  return $options;
}
