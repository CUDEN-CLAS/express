<?php

/**
 * Implements hook_express_dashboard().
 *
 * Adding user Dashboard.
 */
function cu_dashboard_seo_express_dashboard($variables) {
  $variables['seo'] = array(
    'title' => 'SEO',
    'callback' => 'cu_dashboard_seo_content',
    'access arguments' => array('use seo dashboard'),
  );
  return $variables;
}

/**
 * Implements hook_permission().
 */
function cu_dashboard_seo_permission() {
  return array(
    'use seo dashboard' => array(
      'title' => 'Use the SEO Dashboard',
      'description' => 'Access the SEO dashboard',
    ),
  );
}

/**
 * Callback function for user dashboard.
 */
function cu_dashboard_seo_content() {
  $output = array();
  $output['top']['widgets']['one']['title'] = 'Search Engine Optimization';
  $output['top']['widgets']['one']['content']['#markup'] = '<p>This is the SEO dashboard!!!</p>';
  $output['top']['weight'] = -99;

  $output['left']['widgets']['checklist']['title'] = 'SEO Checklist';
  $output['left']['widgets']['checklist']['content']['#markup'] = cu_dashboard_seo_checklist_output();

  $output['right']['widgets']['content_updated']['title'] = 'Content Updated';
  $output['right']['widgets']['content_updated']['content']['#markup'] = '<p>Content was last updated...</p>';
  $output['right']['widgets']['content_updated']['weight'] = 0;

  return $output;
}

/**
 * Define site permissions in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @param $role
 *   The role for which the permissions are being requested.
 *
 * @return
 *   An array defining all the permissions for the site.
 */

function cu_dashboard_seo_secure_permissions($role) {

  $permissions = array(
    'administrator' => array(
      'use seo dashboard',
    ),
    'content_editor' => array(
      'use seo dashboard',
    ),
    'developer' => array(
      'use seo dashboard',
    ),
    'edit_my_content' => array(
      'use seo dashboard',
    ),
    'site_owner' => array(
      'use seo dashboard',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

function cu_dashboard_seo_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_dashboard_seo');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'dashboard', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

function cu_dashboard_seo_checklist() {
  $checklist = array();

  $checklist['google_analytics'] = array(
    'title' => 'Google Analytics',
    'weight' => '0',
    'description' => 'Checklist description goes here.',
    'path' => 'admin/settings/site-configuration/google-analytics',
    'callback' => 'cu_seo_checklist_google_analytics',
  );

  $checklist['site_verification'] = array(
    'title' => 'Site Verifcation',
    'weight' => '1',
    'description' => 'Checklist description goes here.',
    'path' => 'admin/settings/seo/verifications',
    'callback' => 'cu_seo_checklist_site_verification',
  );

  $checklist['link_checker'] = array(
    'title' => 'Link Checker',
    'weight' => '2',
    'description' => 'Checklist description goes here.',
    'path' => 'admin/settings/seo/linkchecker',
    'callback' => 'cu_seo_checklist_link_checker',
  );
  $checklist['site_map'] = array(
    'title' => 'Site Map',
    'weight' => '3',
    'description' => 'Checklist description goes here.',
    'path' => 'admin/settings/seo/xmlsitemap',
    'callback' => 'cu_seo_checklist_site_map',
  );

  return $checklist;
}

function cu_seo_checklist_google_analytics() {
  $status = variable_get('ga_account', NULL) ? 1 : 0;
  return $status;
}

function cu_seo_checklist_site_verification() {
  $query = db_select('site_verify', 'sv');
  $query->fields('sv', array('svid', 'engine'));
  $svs = $query->execute()->fetchCol();
  if (count($svs) > 0) {
    $status = 1;
  }
  else {
    $status = 0;
  }
  return $status;
}

function cu_seo_checklist_link_checker() {
  $status = 0;
  return $status;
}

function cu_seo_checklist_site_map() {
  $status = 1;
  return $status;
}

function cu_dashboard_seo_checklist_output() {
  $checklist_items = cu_dashboard_seo_checklist();

  // Check for missing section weights and then sort
  foreach ($checklist_items as $key => $item) {
    $checklist_items[$key]['weight'] = isset($checklist_items[$key]['weight']) ? $checklist_items[$key]['weight'] : 0;
  }
  uasort($checklist_items, 'drupal_sort_weight');



  $checklist_output = array();

  foreach ($checklist_items as $key => $item) {
    $callback = $item['callback'];
    $item['indicator'] = $callback();
    if (isset($item['path'])) {
      $title = $item['title'];
      $item['title'] = l($title, $item['path']);
    }
    $checklist_output[$key]['#markup'] = theme('seo_checklist_item', $item);
  }
  return render($checklist_output);
}



/**
 * Implements hook_theme().
 *
 * Adds theme functions and tempalte files for dashboards
 */
function cu_dashboard_seo_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_dashboard_seo') . '/templates';

  $registry['seo_checklist_item'] = array(
    'template' => 'seo-checklist-item',
    'path' => $template_dir,
  );

  return $registry;
}
