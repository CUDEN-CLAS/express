<?php

/**
 * @file
 * Alters grouping in admin/modules using hook_system_info_alter
 */

/**
 * Implements hook_page_alter().
 */
function profile_module_manager_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'profile_module_manager'). '/css/profile-module-manager.css');
}

/**
 * Implements hook_menu().
 */
function profile_module_manager_menu() {
  // admin/settings ui provided by express_admin or custom solution

  $items['admin/settings/site-configuration/bundles'] = array(
    'title' => 'Enable Bundles',
    'description' => 'Enable Add-on Bundles for additional functionality',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/settings/bundles/list'),
    'access arguments' => array('enable module bundles'),
    'weight' => 50,
  );

  if (variable_get('profile_module_manager_disable_enabling', 0) == 0) {
    $items['admin/settings/bundles/list'] = array(
      'title' => 'Configure Bundles',
      'description' => 'List of bundles.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('profile_module_manager_bundle_list'),
      //'file' => 'profile_module_manager.admin.inc',
      'access arguments' => array('enable module bundles'),
    );

    $items['admin/settings/bundles/list/enable/%'] = array(
      'title' => 'Enable Bundle',
      'description' => 'Enable a bundle.',
      'page callback' => 'profile_module_manager_bundle_enable',
      'page arguments' => array(5),
      //'file' => 'profile_module_manager.admin.inc',
      'access arguments' => array('enable module bundles'),
    );

    $items['admin/settings/bundles/list/confirm/%'] = array(
      'title' => 'Confirm Enabling Bundle',
      'description' => 'Enable a bundle.',
      'page callback' => 'profile_module_manager_bundle_confirm',
      'page arguments' => array(5),
      'file' => 'profile_module_manager.admin.inc',
      'access arguments' => array('enable module bundles'),
    );
  }
  $items['admin/config/system/module-manager'] = array(
    'title' => 'Profile Module Manager',
    'description' =>  'Configure Module Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_module_manager_admin_settings'),
    'file' => 'profile_module_manager.admin.inc',
    'access arguments' => array('configure profile module manager'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function profile_module_manager_permission() {
  return array(
    'enable module bundles' => array(
      'title' => t('Enable Module Bundles'),
      'description' => t('Enable modules in bundles without administer modules permission.'),
    ),
    'enable admin bundles' => array(
      'title' => t('Enable Admin Bundles'),
      'description' => t('Enable modules in admin bundles without administer modules permission.'),
    ),
    'configure profile module manager' => array(
      'title' => t('Configure Profile Module Manager'),
      'description' => t('Manage hidden bundles and access to UI.'),
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 */
function profile_module_manager_system_info_alter(&$info, $file, $type) {

  if (!variable_get('profile_module_manager_disable_ui_lock', 0)) {
    require_once DRUPAL_ROOT . '/includes/install.inc';
    $profile = install_profile_info(drupal_get_profile());

    if($type == 'module' && in_array($file->name, $profile['dependencies'])) {
      $info['required'] = TRUE;
    }

    if ($type == 'module' && $file->name == variable_get('express_core_version', '')) {
      $info['required'] = TRUE;
    }
  }

}

/**
 * Retuns an array of projects that are enabled, but not ignored
 */
function profile_module_manager_is_config_ideal(){
  $reality = module_list();
  $ideal = profile_module_manager_build_ideal();

  //does the reality match the ideal?
  $diff1 = array_diff_assoc($reality, $ideal);
  $diff2 = array_diff_assoc($ideal, $reality);
  $diff = array_merge($diff1, $diff2);

  return $diff;
}

/**
 * modifies profile_module_manager_ignore array
 */
function profile_module_manager_add_to_ignore($new_ignore) {
  $current_ignore = variable_get('profile_module_manager_ignore', array());

  variable_set('profile_module_manager_ignore', array_merge($current_ignore, $new_ignore));
}

/**
 * Retuns an array of bundles.
 */
function profile_module_manager_get_bundles($status = 'all') {

  if ($status == 'all') {
    $bundles = db_query("SELECT name, filename FROM {system} WHERE type = 'module' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }
  if ($status == 'enabled') {
    $bundles = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1 ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }

  // check for .info for bundle_group = Bundle Group Name
  foreach ($bundles as $key => $bundle) {
    $info_file = str_replace(".module", ".info", $bundle->filename);
    $info = drupal_parse_info_file($info_file);

    if (!isset($info['bundle_group']) && !strpos($key, '_bundle')) {
      unset($bundles[$key]);
    }
  }
  return $bundles;
}

/**
 * Returns an array of core modules.
 */
function profile_module_manager_get_core_modules($status = 'all') {
  if ($status == 'all') {
    $core_modules = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND name LIKE '%_core' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }
  if ($status == 'enabled') {
    $core_modules = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1 AND name LIKE '%_core' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }

  return $core_modules;
}

/**
 * Retuns an array of modules that should be enabled
 */
function profile_module_manager_build_ideal() {
  $new_ideal = array();
  require_once DRUPAL_ROOT . '/includes/install.inc';
  $profile_name = drupal_get_profile();
  $profile = install_profile_info($profile_name);

  // Start with the profile
  $ideal = isset($profile['dependencies']) ? $profile['dependencies'] : array();
  $ignore = isset($profile['optional-dependencies']) ? $profile['optional-dependencies'] : array();

  // Add core dependencies to ideal and ignore arrays.
  $core_modules = profile_module_manager_get_core_modules('enabled');
  foreach($core_modules as $core) {
    // could just replace .module w/ .info from $bundle->filename
    // which is faster?
    $path = drupal_get_path('module', $core->name) . '/' . $core->name . '.info';
    $info = drupal_parse_info_file($path);
    if (isset($info['dependencies'])) {
      $ideal = array_merge($ideal, $info['dependencies']);
    }
    if (isset($info['optional-dependencies'])) {
      $ignore = array_merge($ignore, $info['optional-dependencies']);
    }
    if (isset($info['bundle_group'])) {
      $ignore = array_merge($ignore, $info['bundle_group']);
    }
    // and the core itself
    $ideal[] = $core->name;
  }

  // Add enabled bundle dependencies to ideal and ignore arrays.
  $bundles = profile_module_manager_get_bundles('enabled');

  foreach($bundles as $bundle) {
    // could just replace .module w/ .info from $bundle->filename
    // which is faster?
    $path = drupal_get_path('module', $bundle->name) . '/' . $bundle->name . '.info';
    $info = drupal_parse_info_file($path);

    if (isset($info['dependencies'])) {
      $ideal = array_merge($ideal, $info['dependencies']);
    }
    if (isset($info['optional-dependencies'])) {
      $ignore = array_merge($ignore, $info['optional-dependencies']);
    }

    // and the bundle itself
    $ideal[] = $bundle->name;
  }

  // rebuild ideal so keys = value and ignore optional dependencies
  foreach ($ideal as $item) {
    $new_ideal[$item] = $item;
  }

  // add any ignored project to new_ideal
  foreach ($ignore as $item) {
    if (module_exists($item)) {
      $new_ideal[$item] = $item;
    }
  }


  // add the profile itself to the list
  $new_ideal[$profile_name] = $profile_name;

  return $new_ideal;
}

function profile_module_manager_process_batch($modules, &$context) {

  // Enable modules.
  module_enable($modules);

  // Pass bundle name to batch finished function.
  foreach ($modules as $module) {
    if (strpos($module, '_bundle')) {
      $context['results']['bundle'] = $module;
    }
  }
}

function profile_module_manager_batch_finished($success, $results, $operations) {
  if ($success) {
    // Get bundle name from $results and print message.
    $bundle_name = $results['bundle'];
    $bundle_path = drupal_get_path('module', $bundle_name);
    $bundle = drupal_parse_info_file($bundle_path . '/' . $bundle_name . '.info');
    drupal_set_message('The ' . $bundle['name'] . ' Bundle has been successfully enabled on your site. You may now begin using this functionality and go back to editing your site.');

    // Log bundle enable time.
    $start_time = variable_get('profile_module_manager_enable_timer', 0);
    $end_time = microtime(TRUE);
    $total_time = $end_time - $start_time;
    watchdog('profile_module_manager', '!bundle enable time: !time seconds.', array('!bundle' => $bundle['name'], '!time' => $total_time));
  } else {
    _revert_bundle_on_error();
  }
}

/**
 * Function to handle bundle enabling errors.
 */
function _revert_bundle_on_error() {

}

/**
 * Implements hook_modules_installed().
 * Run functions after bundles are enabled.
 */
function profile_module_manager_modules_enabled($modules) {
  foreach ($modules as $module) {
    // Only run these functions if module name includes _bundle
    if (strpos($module, '_bundle') !== false) {
      // Get the info file.
      $path = drupal_get_path('module', $module) . '/' . $module . '.info';
      $info = drupal_parse_info_file($path);

      // Rebuild node types.
      node_types_rebuild();

      // Clear caches.
      if (isset($info['bundle_cache_clear']) && $info['bundle_cache_clear']) {
        drupal_flush_all_caches();
      }
      if (isset($info['bundle_context_clear']) && $info['bundle_context_clear']) {
        drupal_flush_all_caches();
      }
    }
  }
}

/**
 * Implements hook_theme().
 */

function profile_module_manager_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'profile_module_manager') . '/templates';
  $registry['profile_module_manager_bundle_page'] = array(
    'template' => 'profile-module-manager-bundle-page',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  $registry['profile_module_manager_bundle_group'] = array(
    'template' => 'profile-module-manager-bundle-group',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  $registry['profile_module_manager_bundle'] = array(
    'template' => 'profile-module-manager-bundle',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  $registry['profile_module_manager_bundle_actions_disabled'] = array(
    'template' => 'profile-module-manager-bundle-actions-disabled',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  $registry['profile_module_manager_bundle_actions_enabled'] = array(
    'template' => 'profile-module-manager-bundle-actions-enabled',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  return $registry;
}

/**
 * Build out each group and fill with all cards that have matching bundle_group names.
 *
 * Returns an array of bundle groups.
 */
function _build_out_bundle_groups($bundle) {
  $info_file = str_replace(".module", ".info", $bundle->filename);
  $info = drupal_parse_info_file($info_file);

  if (isset($info['bundle_group'])) {
    $bundle = $info['bundle_group'];
    $bundle_group = $bundle;
  } else {
    $bundle_group = 'Bundles';
  }

  return $bundle_group;
}

/**
 * Callback for admin/settings/bundles/list
 */
function profile_module_manager_bundle_list($form, &$form_state) {
  $form = array();
  $info = array();
  $bundle_info = array();
  $bundle_groups = array();

  // Get the bundles' info array.
  $bundles = profile_module_manager_get_bundles($status = 'all');
  foreach ($bundles as $key => $bundle) {
    $info_file = str_replace(".module", ".info", $bundle->filename);
    $info = drupal_parse_info_file($info_file);
    $bundle_info[$key] = $info;
  }

  // Get bundle groups from each bundle.
  foreach ($bundles as $key => $bundle) {
    $bundle_groups[$key] = (_build_out_bundle_groups($bundle) !== '') ? _build_out_bundle_groups($bundle) : 'Bundles';
  }

  // Make each bundle a fieldset in the form.
  foreach ($bundle_groups as $row_of_bundles) {
    if (!empty($row_of_bundles) && $row_of_bundles !== 'Admin Bundles' && $row_of_bundles !== 'Bundles') {
      $form[$row_of_bundles] = array(
        '#title' => $row_of_bundles,
        '#type' => 'fieldset',
        '#weight' => 1,
      );
    } elseif ($row_of_bundles == 'Admin Bundles') {
      if (user_access('enable admin bundles')) {
        $form['Admin Bundles'] = array(
          '#title' => t('Admin Bundles'),
          '#type' => 'fieldset',
          '#weight' => 100,
        );
      } else {
        $form['Admin Bundles'] = array(
          '#access' => FALSE,
        );
      }
    } else {
      $form['Bundles'] = array(
        '#title' => t('Bundles'),
        '#type' => 'fieldset',
        '#weight' => 0,
      );
    }
    foreach ($bundle_info as $key => $bundle) {
      $enabled = module_exists($key) ? 1 : 0;

      $action_vars = array();
      if ($enabled) {
        $vars['actions'] = theme('profile_module_manager_bundle_actions_enabled', array('actions' => $action_vars));
      } else {
        $action_vars['enable_url'] = current_path() . '/confirm/' . $key;
        if (isset($bundle['project_demo_url'])) {
          $action_vars['demo_url'] = $bundle['project_demo_url'];
        }
        $vars['actions'] = theme('profile_module_manager_bundle_actions_disabled', $action_vars);
      }

      if (isset($bundle['bundle_group']) && $bundle['bundle_group'] == $row_of_bundles) {
        // Get enable, more info action things.

        $form[$row_of_bundles][$bundle['name']] = array(
          '#title' => $bundle['name'],
          '#type' => 'fieldset',
          '#attributes' => array('class' => array('bundle-enable')),
        );
        if (isset($bundle['description'])) {
          $form[$row_of_bundles][$bundle['name']]['body'] = array(
            '#title' => t('Bundle name'),
            '#type' => 'markup',
            '#markup' => '<p>' . substr($bundle['description'], 0, 297) . '</p>',
            '#attributes' => array('class' => array('modules-bundle-description')),
          );
        }
        $form[$row_of_bundles][$bundle['name']]['enable'] = array(
          '#title' => t('Enable bundle'),
          '#type' => 'markup',
          '#markup' => $vars['actions'],
        );
      } elseif (empty($bundle['bundle_group'])) {
        // Get enable, more info action things.

        $form['Bundles'][$bundle['name']] = array(
          '#title' => $bundle['name'],
          '#type' => 'fieldset',
          '#attributes' => array('class' => array('bundle-enable')),
        );
        $form['Bundles'][$bundle['name']]['body'] = array(
          '#title' => t('Bundle name'),
          '#type' => 'markup',
          '#markup' => '<p>' . substr($bundle['description'], 0, 297) . '</p>',
          '#attributes' => array('class' => array('modules-bundle-description')),
        );
        $form['Bundles'][$bundle['name']]['enable'] = array(
          '#title' => t('Enable bundle'),
          '#type' => 'markup',
          '#markup' => $vars['actions'],
        );
      }
    }
  }
  return $form;
}

/**
 * Callback function for admin/settings/bundles/list/enable/%
 */
function profile_module_manager_bundle_enable($bundle) {

  if (variable_get('profile_module_manager_disable_enabling', 0) == 1) {
    $output = '<p>' . variable_get('profile_module_manager_disable_enabling_text', 'The ability to enable bundles has been turned off.') . '</p>';
    return $output;
  }
  // Start bundle enable timer.
  variable_set('profile_module_manager_enable_timer', microtime(TRUE));

  // Make sure this is a bundle
  if (strpos($bundle, '_bundle')) {
    // look up depenencies & enable those first
    $path = drupal_get_path('module', $bundle) . '/' . $bundle . '.info';
    $info = drupal_parse_info_file($path);
    $modules_to_enable = array();
    if (isset($info['dependencies'])) {
      foreach ($info['dependencies'] as $module) {
        if(!module_exists($module)) {
          //module_enable(array($module), FALSE);
          $modules_to_enable[] = $module;
        }
      }
    }
    // enable the bundle last
    if(!module_exists($bundle)) {
      //module_enable(array($bundle), FALSE);
      $modules_to_enable[] = $bundle;
    }

    // Size of modules to enable in each batch.
    $limit = 3;
    $module_chunks = array_chunk($modules_to_enable, $limit, TRUE);

    // Chunk modules into groups.
    $operations = array();
    foreach ($module_chunks as $chunk) {
      $operations[] = array('profile_module_manager_process_batch', array($chunk));
    }

    // Set batch operation and redirect to bundles list when done.
    $batch = array(
      'title' => t('Enabling Bundle'),
      'operations' => $operations,
      'finished' => 'profile_module_manager_batch_finished',
      'init_message' => t('Initializing...'),
      'progress_message' => t('Operation @current out of @total.'),
      'error_message' => t('Bundle failed to be enabled.'),
    );
    batch_set($batch);

    // Logout all users except currently using site if lgout flag is set.
    if (isset($info['bundle_logout']) && $info['bundle_logout'] == 1) {
      // Get all logged in users based on timestamp of being logged in since 900 seconds ago.
      $interval = REQUEST_TIME - 900;
      $items = db_query('SELECT u.uid, u.name, MAX(s.timestamp) AS max_timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= :interval AND s.uid > 0 GROUP BY u.uid, u.name ORDER BY max_timestamp DESC', array(':interval' => $interval))->fetchAll();
      $uids = array();
      foreach ($items as $item) {
        $uids[] = $item->uid;
      }
      // Log out all other users.
      $deleted_users = db_delete('sessions')
        ->condition('uid', $uids, 'NOT IN')
        ->execute();
    }
    batch_process('admin/settings/bundles/list');
  }
}


