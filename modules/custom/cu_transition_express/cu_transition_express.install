<?php


/**
 * Implements hook_enable().
 */
function cu_transition_express_enable() {

}
/**
 * Implements hook_install().
 */
function cu_transition_express_install() {
  // all old modules should have been disabled and uninstalled
  // by cu_transition_fit

  drupal_get_schema(NULL, TRUE);
  system_rebuild_module_data();
  drupal_flush_all_caches();

  // force express to be enabled... this will get set to 0 again if any of the dependencies
  // defined in the epxress.info can't be enabled
  db_update('system')
  ->fields(array(
    'status' => 1,
   ))
  ->condition('name', 'express', '=')
  ->execute();

  // enable new modules
  module_disable(array(
    'advanced_link',
  ));

  drupal_uninstall_modules(array(
    'advanced_link',
  ));

  // Enable new modules.
  module_enable(array(
    'cu_core',
    'view_unpublished',
    'cu_colorbox',
    'express_add_content',
    'express_settings',
    'express_help',
    'express_theme_picker',
    'express_field_bases',
    'express_linkit_profiles',
    'disable_messages',
    'cu_bean_override_view',
    'cu_people_administration_override',
    'cu_content_administration_override',
  ));

  // Set variable for disabling certain Metatag messages.
  variable_set('disable_messages_ignore_regex', array('/^Metatag support has been enabled for the .*?$/i'));
  variable_set('disable_messages_ignore_patterns', 'Metatag support has been enabled for the .*?');

  // Enable new themes.
  theme_enable(array(
    'cuhighlight',
    'curise',
    'cuspirit',
    'cutradition',
  ));

  // Get saved theme from database.
  $current_theme = variable_get('express_current_theme', '');
  variable_set('theme_default', $current_theme);


  db_delete('menu_links')
    ->condition('menu_name', 'management')
    ->execute();

  drupal_flush_all_caches();

  // Rebuild access permissions last.
  node_access_rebuild();

  // some sites have errors related to this table
  // table should exist, but be empty
  // table is initially renamed by cu_tranistion_fit
  if (!db_table_exists('cck_field_settings') && db_table_exists('cck_field_settings_backup')) {
    db_rename_table('cck_field_settings_backup', 'cck_field_settings');
  }

  // let users login again
  module_disable(array(
    'cu_logout_users',
  ));
  cu_transition_express_bs_fields_remove();
}

/**
 * Remove block selector fields from existing sites.
 */
function cu_transition_express_update_7001() {
  cu_transition_express_bs_fields_remove();
}


/**
 * Remove fields from block selector
 */
function cu_transition_express_bs_fields_remove() {
  $fields = array(
    'field_sidebar_first',
    'field_sidebar_second',
    'field_header',
    'field_footer',
    'field_inner_content_right',
    'field_inner_content_left',
    'field_intro',
    'field_slider',
    'field_wide_2',
  );
  $types = array(
    'article',
    'article_list_page',
    'page',
    'faqs',
    'people_list_page',
    'person',
    'photo_gallery',
    'video',
  );
  foreach ($fields as $field) {
    foreach($types as $type) {
      if ($instance = field_info_instance('node', $field, $type)) {
        field_delete_instance($instance);
      }
    }
  }
}

/**
 * Revert features by passing features in an array.
 */
function cu_transition_express_revert_features($features) {
  foreach ($features as $feature) {
    $f = features_get_features($feature);
    $components = array_keys($f->info['features']);
    features_revert(array($feature => $components));
  }
}
