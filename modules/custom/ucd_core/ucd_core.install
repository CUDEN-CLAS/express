<?php

/**
 * @file
 * Install hooks for ucd_core module.
 */


/**
 * Implements hook_install().
 */
function ucd_core_install() {
	
  $hosting = express_check_known_hosts();

  if ($hosting == 'travis') {
    module_enable(array('travis_hosting'));
  }

  if ($hosting == 'pantheon') {
    module_enable(array('pantheon_hosting'));
  }
  
  if ($hosting == 'cudenver') {
    module_enable(array('cuden_hosting'));
  }

  // @TODO: If it's not Travis or Pantheon, assume it's CUDEN for now.
  // Eventually update to deal with ng (2.0) vs. 3.0
  if ($hosting == FALSE) {
    module_enable(array('cuden_hosting'));
  }	

  theme_enable(array(
    #'cuhighlight',
    'cuivory',
    'culayers',
    #'cuminimal',
    'cumodern',
    'curise',
    'cushadow',
    #'cusimple',
    'cuspirit',
    #'cuswatch',
    #'cutradition',
  ));

  // Add blocks shortcut to shortcuts set.
  $shortcut_set = shortcut_set_load(SHORTCUT_DEFAULT_SET_NAME);
  $shortcut_set->links[] =
    array(
      'link_path' => 'admin/content/blocks',
      'link_title' => st('Blocks'),
      'weight' => -18,
  );
  shortcut_set_save($shortcut_set);

  //set default variables for user_external_invite
  ucd_set_external_invite_variables();

  // change for #FIT-583 for https://www.drupal.org/node/2172293
  // Must be set before cu_forms_bundle is enabled
  variable_set('webform_install_add_body_field', TRUE);

  variable_set('site_name', 'University of Colorado Denver');
  variable_set('site_name_1', 'University of Colorado Denver');
  variable_set('site_slogan', 'University of Colorado Denver');

  variable_set('express_help_base_url', 'https://clas.ucdenver.edu/web-support');

  // Set message for when enabling of bundles is turned off.
  variable_set('profile_module_manager_disable_enabling_text', 'Due to unexpectedly high load on the servers, the option to enable bundles has temporarily been disabled.  Please check back tomorrow.');
  
  // Set the syslog_identity variable to the SID.
  $cu_sid = variable_get('cu_sid', '');
  if ($cu_sid) {
    // Current value
    $syslog_identity = 'drupal-' . $cu_sid;
  }
  else {
    $syslog_identity = 'drupal-no_sid';
  }
  variable_set('syslog_identity', $syslog_identity);

  // Key for 'LOG_LOCAL0' in the form.
  variable_set('syslog_facility', '128');
  variable_set('syslog_format', '!base_url|!timestamp|!type|!ip|!request_uri|!referer|!uid|!link|!message');

  // Set variable for disabling certain messages from users.
  variable_set('disable_messages_ignore_regex', array(
    '/^Metatag support has been enabled for the .*?$/i',
    '/^You can now .+configure the CAPTCHA module.+ for your site.$/i',
    '/^Note that the CAPTCHA module disables .+page caching.+ of pages that include a CAPTCHA challenge.$/i',
    '/^The block System help was assigned to the invalid region help and has been disabled.$/i',
  ));
  variable_set('disable_messages_ignore_patterns', 'Metatag support has been enabled for the .+
You can now .+configure the CAPTCHA module.+ for your site.
Note that the CAPTCHA module disables .+page caching.+ of pages that include a CAPTCHA challenge.
The block System help was assigned to the invalid region help and has been disabled.');

  variable_set('express_layout_node_type_ignore', array('file'));

  db_update('responsive_preview')
    ->fields(array('status' => 0,))
    ->execute();

  db_update('responsive_preview')
    ->fields(array('status' => 1,))
    ->condition(db_or()
      ->condition('name', 'medium')
      ->condition('name', 'small')
    )
    ->execute();

  // Disable user 1 & set random name.
  $random_name = 'admin-' . user_password(10);

  // Generate hashed password.
  $unhashed_pass = user_password(50);
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $hashed_pass = user_hash_password(trim($unhashed_pass));

  variable_set('user_mail_status_activated_notify ', 0);

  // Set admin user email to something not admin@example.com.
  $admin_user = user_load(1);
  $admin_user->mail = 'clas-web-support@ucdenver.edu';
  $admin_user->name = $random_name;
  $admin_user->pass = $hashed_pass;
  $admin_user->status = 0;
  user_save($admin_user);

  watchdog('express', 'attempted to disable uid 1');

  variable_set('profile_module_manager_bundle_ignore', array('cu_newsletter_bundle' => 'cu_newsletter_bundle'));
  
}

/**
 * Set default variables for user_external_invite.
 */
function ucd_set_external_invite_variables() {
	
  // Set core invite roles.
  $core_roles = express_permissions_role_settings(array('core'));
  $core_role_ids = array();
  foreach ($core_roles['rid'] as $rid => $role) {
    $core_role_ids[] = $rid;
  }
  variable_set('user_external_invite_core_roles', $core_role_ids);

  // Set Content Editor as the default role to invite.
  variable_set('user_external_invite_default_role', $core_roles['names']['content_editor']['rid']);

  // Set addon invite roles.
  $addon_roles = express_permissions_role_settings(array('core_addon'));
  $addon_roles_array = array();
  foreach ($addon_roles['rid'] as $rid => $role) {
    $addon_roles_array[] = $rid;
}

  variable_set('user_external_invite_addon_roles', $addon_roles_array);
  variable_set('user_external_invite_days_valid_for', 5);

  variable_set('user_external_invite_invite_template', '[user_external_invite:invite_custom]

You have been invited to join the [site:name] Web Express website as a user with "[user_external_invite:invite_core_role][user_external_invite:invite_addon_roles]" access privileges.

To accept this invitation:
1) Go to [user_external_invite:invite_link]
2) Login with your university account and password.

Upon completion, you will receive an email confirming your access.

--
The CLAS Drupal Web Express Team
clas-web-support@ucdenver.edu');

  variable_set('user_external_invite_confirmation_template', 'We have received your request to grant "[user_external_invite:invite_core_role][user_external_invite:invite_addon_roles]" access to the following users:

[user_external_invite:invited_emails]

An email invitation has been sent requesting the user to login to [site:url] and accept the invitation. Upon completion, a confirmation email will be sent.

If you did not submit this request or need to modify it, please contact us at clas-web-support@ucdenver.edu.

--
The CLAS Drupal Web Express Team
clas-web-support@ucdenver.edu');

  variable_set('user_external_invite_accepted_template', 'We are confirming [user_external_invite:invited_email] now has "[user_external_invite:invite_core_role][user_external_invite:invite_addon_roles]" access to the [site:name], [site:url], website.

Web Central:
You can use the Web Central website at CU Boulder as your main resource for step-by-step tutorials -> https://www.colorado.edu/webcentral/

--
The CLAS Drupal Web Express Team
clas-web-support@ucdenver.edu');

  variable_set('user_external_invite_accepted_confirmation_template', 'You have successfully joined the [site:name] Web Express website as a user with "[user_external_invite:invite_core_role][user_external_invite:invite_addon_roles]" access privileges.

To access and edit this site:
1) Go to [user_external_invite:invite_login_link]
2) Login with your university account and password.

Web Central:
You can use the Web Central website at CU Boulder as your main resource for step-by-step tutorials -> https://www.colorado.edu/webcentral/

--
The CLAS Drupal Web Express Team
clas-web-support@ucdenver.edu');

}

/**
 * Variable sets for Express transition.
 */
function ucd_core_update_7001() {

  variable_set('express_help_base_url', 'https://clas.ucdenver.edu/web-support');

  variable_set('profile_module_manager_ignore', 'secure_permissions, express_permissions, cu_users, ucd_core, cu_help, cu_inventory, cu_inventory_stats, express_final');

  // Set SEO bundle to be hidden in bundle list form.
  variable_set('profile_module_manager_bundle_ignore', array('cu_seo_bundle' => 'cu_seo_bundle'));
  // Set message for when enabling of bundles is turned off.
  variable_set('profile_module_manager_disable_enabling_text', 'Due to unexpectedly high load on the servers, the option to enable bundles has temporarily been disabled.  Please check back tomorrow.');

  // Set variable for disabling certain messages from users.
  variable_set('disable_messages_ignore_regex', array(
    '/^Metatag support has been enabled for the .*?$/i',
    '/^You can now .+configure the CAPTCHA module.+ for your site.$/i',
    '/^Note that the CAPTCHA module disables .+page caching.+ of pages that include a CAPTCHA challenge.$/i',
  ));
  variable_set('disable_messages_ignore_patterns', 'Metatag support has been enabled for the .+
You can now .+configure the CAPTCHA module.+ for your site.
Note that the CAPTCHA module disables .+page caching.+ of pages that include a CAPTCHA challenge.');
}

/**
 * Revert features by passing features in an array.
 */
function ucd_core_revert_features($features = NULL) {
  // If an array of specific features isn't passed, populate with all overridden features.
  if ($features == NULL) {
    module_load_include('inc', 'features', 'features.export');
    $features = features_get_features();
    foreach ($features as $feature) {
      if (features_get_storage($feature->name) == 0) {
        unset($features[$feature->name]);
      }
    }
  }
  // Check against features that currently can't be reverted.
  $express_protected_features = array_merge(array(
    'cu_home_page',
    'cu_sitewide',
  ), explode(',', variable_get('express_protected_features', '')));

  foreach ($features as $key => $feature) {
    if (!in_array($key, $express_protected_features)) {
      $f = features_get_features($key);
      $components = array_keys($f->info['features']);
      features_revert(array($f->name => $components));
      watchdog('ucd_core', 'Attempting to revert %feature', array('%feature' => $feature->name), WATCHDOG_NOTICE);
    }
  }
}

/**
 * Run every time a db update.
 *
 * This calls the inventory update function and admin password change.
 */
function ucd_core_express_update($version) {

  ucd_core_atlas_update($version);

  // Change admin user/pass.
  ucd_core_scramble_admin();
}

/**
 * Updates inventory with profile version.
 */
function ucd_core_inventory_update($version) {
  // Nulling this function out so that older update hooks will still work.
  return;
}

/**
 * Updates Atlas with profile version.
 */
function ucd_core_atlas_update($version) {
  if (module_exists('atlas')) {
    atlas_process_core_schema_version($version);
  }
}

/**
 * Obscures uid 1 password and username for added security.
 */
function ucd_core_scramble_admin() {

  // Generate hashed password.
  $unhashed_pass = user_password(50);
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $hashed_pass = user_hash_password(trim($unhashed_pass));

  // Abort if the hashing failed and returned FALSE.
  if (!$hashed_pass) {
    return FALSE;
  }
  else {
    // Save admin user with new user/password.
    $user = user_load(1);
    $user->name = 'admin-' . user_password(10);
    $user->pass = $hashed_pass;
    user_save($user);
  }
}

/**
 * Express 3.0.0 Update - TBD
 */
function ucd_core_update_7053() {
  ucd_core_revert_features();
}